{"ast":null,"code":"import _slicedToArray from \"/Users/james/git/minesweeper/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/james/git/minesweeper/src/components/tile/tile.jsx\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { updateShowingTiles } from '../../actions/tile-action';\nimport { connect } from 'react-redux';\nimport './tile.scss';\n\nfunction Tile(props) {\n  // const [cover, setCover] = useState('cover');\n  // const itemsRef = useRef([]);\n  // let currentTile = itemsRef.current;\n  // currentTile = `${props.rowIndex},${props.index}`;\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        showTiles = _useState2[0],\n        setShowTiles = _useState2[1];\n\n  function selectTile(item) {\n    let replaceShowingTiles = [this.props.show];\n    this.props.onupdateShowingTiles;\n    replaceShowingTiles.push(`${props.rowIndex}${props.index}`);\n    console.log(showTiles);\n    console.log(replaceShowingTiles);\n    setShowTiles(replaceShowingTiles);\n    if (item === -1) alert(\"You lose!\");else {// itemsRef.current[props.rowIndex + (props.index*10)].classList.add(\"un-cover\");\n      // itemsRef.current[10].classList.add(\"un-cover\");\n      // setCover('un-cover');\n      // console.log(props.rowIndex);\n      // itemsRef.current.classList.add(\"un-cover\");\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: showTiles.filter(tile => tile == `${props.rowIndex}${props.index}`).length > 0 ? `un-cover tile ${props.rowIndex}${props.index}` : `cover tile ${props.rowIndex}${props.index}`,\n    onClick: () => selectTile(props.tile),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, props.tile);\n}\n\nconst mapStateToProps = state => ({\n  showingTiles: state.showingTiles\n});\n\nconst mapActionsToProps = {\n  onupdateShowingTiles: updateShowingTiles\n};\nexport default connect(mapStateToProps, mapActionsToProps)(Tile);","map":{"version":3,"sources":["/Users/james/git/minesweeper/src/components/tile/tile.jsx"],"names":["React","useState","useEffect","useCallback","useRef","updateShowingTiles","connect","Tile","props","showTiles","setShowTiles","selectTile","item","replaceShowingTiles","show","onupdateShowingTiles","push","rowIndex","index","console","log","alert","filter","tile","length","mapStateToProps","state","showingTiles","mapActionsToProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,WAApC,EAAiDC,MAAjD,QAA8D,OAA9D;AACA,SAASC,kBAAT,QAAmC,2BAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,aAAP;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACjB;AACA;AACA;AACA;AAJiB,oBAKiBP,QAAQ,CAAC,EAAD,CALzB;AAAA;AAAA,QAKVQ,SALU;AAAA,QAKCC,YALD;;AAOjB,WAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,QAAIC,mBAAmB,GAAG,CAAC,KAAKL,KAAL,CAAWM,IAAZ,CAA1B;AAEA,SAAKN,KAAL,CAAWO,oBAAX;AAEAF,IAAAA,mBAAmB,CAACG,IAApB,CAA0B,GAAER,KAAK,CAACS,QAAS,GAAET,KAAK,CAACU,KAAM,EAAzD;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYP,mBAAZ;AACAH,IAAAA,YAAY,CAACG,mBAAD,CAAZ;AACA,QAAGD,IAAI,KAAK,CAAC,CAAb,EAAgBS,KAAK,CAAC,WAAD,CAAL,CAAhB,KAEK,CACD;AACA;AAEA;AACA;AACA;AAEH;AACJ;;AAED,SACI;AAAK,IAAA,SAAS,EAAGZ,SAAS,CAACa,MAAV,CAAiBC,IAAI,IAAIA,IAAI,IAAK,GAAEf,KAAK,CAACS,QAAS,GAAET,KAAK,CAACU,KAAM,EAAjE,EAAoEM,MAApE,GAA6E,CAA7E,GAAkF,iBAAgBhB,KAAK,CAACS,QAAS,GAAET,KAAK,CAACU,KAAM,EAA/H,GAAoI,cAAaV,KAAK,CAACS,QAAS,GAAET,KAAK,CAACU,KAAM,EAA/L;AAAmM,IAAA,OAAO,EAAE,MAAMP,UAAU,CAACH,KAAK,CAACe,IAAP,CAA5N;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKf,KAAK,CAACe,IADX,CADJ;AAKH;;AAED,MAAME,eAAe,GAAGC,KAAK,KAAK;AAC9BC,EAAAA,YAAY,EAAED,KAAK,CAACC;AADU,CAAL,CAA7B;;AAIA,MAAMC,iBAAiB,GAAG;AACtBb,EAAAA,oBAAoB,EAAEV;AADA,CAA1B;AAIA,eAAeC,OAAO,CAACmB,eAAD,EAAkBG,iBAAlB,CAAP,CAA6CrB,IAA7C,CAAf","sourcesContent":["import React, {useState, useEffect, useCallback, useRef} from 'react';\nimport { updateShowingTiles } from '../../actions/tile-action';\nimport { connect } from 'react-redux';\n\nimport './tile.scss';\n\nfunction Tile(props) {\n    // const [cover, setCover] = useState('cover');\n    // const itemsRef = useRef([]);\n    // let currentTile = itemsRef.current;\n    // currentTile = `${props.rowIndex},${props.index}`;\n    const [showTiles, setShowTiles] = useState([]);\n\n    function selectTile(item) {\n        let replaceShowingTiles = [this.props.show];\n\n        this.props.onupdateShowingTiles\n\n        replaceShowingTiles.push(`${props.rowIndex}${props.index}`);\n        console.log(showTiles);\n        console.log(replaceShowingTiles);\n        setShowTiles(replaceShowingTiles);\n        if(item === -1) alert(\"You lose!\");\n\n        else {\n            // itemsRef.current[props.rowIndex + (props.index*10)].classList.add(\"un-cover\");\n            // itemsRef.current[10].classList.add(\"un-cover\");\n\n            // setCover('un-cover');\n            // console.log(props.rowIndex);\n            // itemsRef.current.classList.add(\"un-cover\");\n\n        }\n    }\n\n    return (\n        <div className={ showTiles.filter(tile => tile == `${props.rowIndex}${props.index}`).length > 0 ? `un-cover tile ${props.rowIndex}${props.index}` : `cover tile ${props.rowIndex}${props.index}` } onClick={() => selectTile(props.tile)}>\n            {props.tile}\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    showingTiles: state.showingTiles,\n});\n\nconst mapActionsToProps = {\n    onupdateShowingTiles: updateShowingTiles,\n};\n\nexport default connect(mapStateToProps, mapActionsToProps) (Tile);"]},"metadata":{},"sourceType":"module"}