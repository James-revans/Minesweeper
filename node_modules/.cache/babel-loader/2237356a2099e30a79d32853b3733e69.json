{"ast":null,"code":"var _jsxFileName = \"/Users/james/git/minesweeper/src/components/tile/tile.jsx\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './tile.scss';\n\nfunction Tile(props) {\n  // const [cover, setCover] = useState('cover');\n  // const tileEl = useRef(null);\n  const tileEl = useRef([...Array(100)].map(() => createRef())); // let currentTile = tileEl.current;\n  // currentTile = `${props.rowIndex},${props.index}`;\n\n  function selectTile(item) {\n    if (item === -1) alert(\"You lose!\");else {\n      // setCover('un-cover');\n      // console.log(props.rowIndex);\n      // tileEl.current.classList.add(\"un-cover\");\n      if (item === 0) {}\n\n      console.log(tileEl);\n      revealBlanks();\n    }\n  }\n\n  const revealBlanks = useCallback(() => {\n    if (props.tile === null) {\n      tileEl.current.classList.add(\"un-cover\");\n    }\n  });\n  useEffect(() => {// tileEl.current = currentTile;\n    // console.log(tileEl.current);\n  });\n  return React.createElement(\"div\", {\n    ref: tileEl.current[props.index + props.rowIndex * 10],\n    className: `tile cover ${props.rowIndex}${props.index}`,\n    onClick: () => selectTile(props.tile),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, props.tile);\n}\n\nexport default Tile;","map":{"version":3,"sources":["/Users/james/git/minesweeper/src/components/tile/tile.jsx"],"names":["React","useState","useEffect","useCallback","useRef","Tile","props","tileEl","Array","map","createRef","selectTile","item","alert","console","log","revealBlanks","tile","current","classList","add","index","rowIndex"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,WAApC,EAAiDC,MAAjD,QAA8D,OAA9D;AACA,OAAO,aAAP;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACjB;AACA;AACA,QAAMC,MAAM,GAAGH,MAAM,CAAC,CAAC,GAAGI,KAAK,CAAC,GAAD,CAAT,EAAgBC,GAAhB,CAAoB,MAAMC,SAAS,EAAnC,CAAD,CAArB,CAHiB,CAKjB;AACA;;AAEA,WAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,QAAGA,IAAI,KAAK,CAAC,CAAb,EAAgBC,KAAK,CAAC,WAAD,CAAL,CAAhB,KACK;AAED;AACA;AACA;AACA,UAAGD,IAAI,KAAK,CAAZ,EAAe,CAEd;;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AACAS,MAAAA,YAAY;AACf;AACJ;;AAED,QAAMA,YAAY,GAAGb,WAAW,CAC5B,MAAM;AACF,QAAGG,KAAK,CAACW,IAAN,KAAe,IAAlB,EAAwB;AACpBV,MAAAA,MAAM,CAACW,OAAP,CAAeC,SAAf,CAAyBC,GAAzB,CAA6B,UAA7B;AACH;AACJ,GAL2B,CAAhC;AAOAlB,EAAAA,SAAS,CAAC,MAAM,CAEZ;AAEA;AACH,GALQ,CAAT;AAOA,SACI;AAAK,IAAA,GAAG,EAAEK,MAAM,CAACW,OAAP,CAAeZ,KAAK,CAACe,KAAN,GAAef,KAAK,CAACgB,QAAN,GAAe,EAA7C,CAAV;AAA6D,IAAA,SAAS,EAAG,cAAahB,KAAK,CAACgB,QAAS,GAAEhB,KAAK,CAACe,KAAM,EAAnH;AAAsH,IAAA,OAAO,EAAE,MAAMV,UAAU,CAACL,KAAK,CAACW,IAAP,CAA/I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKX,KAAK,CAACW,IADX,CADJ;AAKH;;AACD,eAAeZ,IAAf","sourcesContent":["import React, {useState, useEffect, useCallback, useRef} from 'react';\nimport './tile.scss';\n\nfunction Tile(props) {\n    // const [cover, setCover] = useState('cover');\n    // const tileEl = useRef(null);\n    const tileEl = useRef([...Array(100)].map(() => createRef()));\n\n    // let currentTile = tileEl.current;\n    // currentTile = `${props.rowIndex},${props.index}`;\n\n    function selectTile(item) {\n        if(item === -1) alert(\"You lose!\");\n        else {\n\n            // setCover('un-cover');\n            // console.log(props.rowIndex);\n            // tileEl.current.classList.add(\"un-cover\");\n            if(item === 0) {\n                \n            }\n            console.log(tileEl);\n            revealBlanks();\n        }\n    }\n\n    const revealBlanks = useCallback(\n        () => {\n            if(props.tile === null) {\n                tileEl.current.classList.add(\"un-cover\");\n            }\n        }\n    )\n    useEffect(() => {\n\n        // tileEl.current = currentTile;\n        \n        // console.log(tileEl.current);\n    });\n\n    return (\n        <div ref={tileEl.current[props.index + (props.rowIndex*10)]} className={`tile cover ${props.rowIndex}${props.index}`} onClick={() => selectTile(props.tile)}>\n            {props.tile}\n        </div>\n    )\n}\nexport default Tile;"]},"metadata":{},"sourceType":"module"}