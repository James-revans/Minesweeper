{"ast":null,"code":"import _slicedToArray from \"/Users/james/git/minesweeper/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/james/git/minesweeper/src/components/board/board.jsx\";\nimport React, { useState, useRef } from 'react';\nimport './board.scss';\nimport Tile from '../tile/tile';\n\nfunction Board(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        tiles = _useState2[0],\n        setTiles = _useState2[1];\n\n  const itemsRef = useRef([...Array(100)].map(() => React.createRef()));\n\n  function genTiles() {\n    let replaceTiles = Array.from(Array(10), _ => Array(10).fill(null));\n    replaceTiles.forEach((arr, arrIndex) => {\n      arr.forEach((item, index) => {\n        let num = Math.floor(Math.random() * (20 + 1)) - 1;\n\n        if (num === -1) {\n          replaceTiles[arrIndex][index] = num;\n          console.log(arr);\n        }\n      });\n    });\n    replaceTiles.forEach((arr, arrIndex) => {\n      arr.forEach((item, index) => {\n        if (item === -1) {\n          if (arr[index + 1] !== undefined && arr[index + 1] !== -1) arr[index + 1] += 1;\n          if (arr[index - 1] !== undefined && arr[index - 1] !== -1) arr[index - 1] += 1;\n\n          if (replaceTiles[arrIndex - 1] !== undefined) {\n            if (replaceTiles[arrIndex - 1][index - 1] !== undefined && replaceTiles[arrIndex - 1][index - 1] !== -1) replaceTiles[arrIndex - 1][index - 1] += 1;\n            if (replaceTiles[arrIndex - 1][index] !== undefined && replaceTiles[arrIndex - 1][index] !== -1) replaceTiles[arrIndex - 1][index] += 1;\n            if (replaceTiles[arrIndex - 1][index + 1] !== undefined && replaceTiles[arrIndex - 1][index + 1] !== -1) replaceTiles[arrIndex - 1][index + 1] += 1;\n          }\n\n          if (replaceTiles[arrIndex + 1] !== undefined) {\n            if (replaceTiles[arrIndex + 1][index - 1] !== undefined && replaceTiles[arrIndex + 1][index - 1] !== -1) replaceTiles[arrIndex + 1][index - 1] += 1;\n            if (replaceTiles[arrIndex + 1][index] !== undefined && replaceTiles[arrIndex + 1][index] !== -1) replaceTiles[arrIndex + 1][index] += 1;\n            if (replaceTiles[arrIndex + 1][index + 1] !== undefined && replaceTiles[arrIndex + 1][index + 1] !== -1) replaceTiles[arrIndex + 1][index + 1] += 1;\n          }\n        }\n      });\n    });\n    setTiles(replaceTiles);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"board__message\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Minesweeper\"), React.createElement(\"button\", {\n    onClick: genTiles,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Start Game\"), React.createElement(\"div\", {\n    className: \"board__tiles\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, tiles.map((row, rowIndex) => React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, row.map((tile, index) => React.createElement(Tile, {\n    key: index,\n    tile: tile,\n    index: index,\n    rowIndex: rowIndex,\n    tileArr: tiles,\n    ref: itemsRef.current[rowIndex + index * 10],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }))))));\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/james/git/minesweeper/src/components/board/board.jsx"],"names":["React","useState","useRef","Tile","Board","props","tiles","setTiles","itemsRef","Array","map","createRef","genTiles","replaceTiles","from","_","fill","forEach","arr","arrIndex","item","index","num","Math","floor","random","console","log","undefined","row","rowIndex","tile","current"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './board.scss';\n\nimport Tile from '../tile/tile';\n\nfunction Board(props) {\n    const [tiles, setTiles] = useState([]);\n    const itemsRef = useRef([...Array(100)].map(() => React.createRef()));\n\n    function genTiles() {\n        let replaceTiles = Array.from(Array(10), _ => Array(10).fill(null));\n        replaceTiles.forEach((arr, arrIndex) => {\n            arr.forEach((item, index) => {\n                let num = Math.floor(Math.random() * (20 + 1)) -1;\n                if(num === -1) {\n                    replaceTiles[arrIndex][index] = num;\n                    console.log(arr);\n                }\n            })\n        })\n        replaceTiles.forEach((arr, arrIndex) => {\n            arr.forEach((item, index) => {\n                if (item === -1) {\n                    if(arr[index +1] !== undefined && arr[index +1] !== -1) arr[index +1]+=1\n                    if(arr[index -1] !== undefined && arr[index -1] !== -1) arr[index -1]+=1;\n                    if(replaceTiles[arrIndex-1] !== undefined) {\n                        if(replaceTiles[arrIndex-1][index-1] !== undefined && replaceTiles[arrIndex-1][index-1] !== -1) replaceTiles[arrIndex-1][index-1]+=1;\n                        if(replaceTiles[arrIndex-1][index] !== undefined && replaceTiles[arrIndex-1][index] !== -1) replaceTiles[arrIndex-1][index]+=1;\n                        if(replaceTiles[arrIndex-1][index+1] !== undefined && replaceTiles[arrIndex-1][index+1] !== -1) replaceTiles[arrIndex-1][index+1]+=1;\n                    }\n                    if(replaceTiles[arrIndex+1] !== undefined) {\n                        if(replaceTiles[arrIndex+1][index-1] !== undefined && replaceTiles[arrIndex+1][index-1] !== -1) replaceTiles[arrIndex+1][index-1]+=1;\n                        if(replaceTiles[arrIndex+1][index] !== undefined && replaceTiles[arrIndex+1][index] !== -1) replaceTiles[arrIndex+1][index]+=1;\n                        if(replaceTiles[arrIndex+1][index+1] !== undefined && replaceTiles[arrIndex+1][index+1] !== -1) replaceTiles[arrIndex+1][index+1]+=1;\n                    }\n                }\n            })\n        })\n        setTiles(replaceTiles);\n    }\n    return (\n        <div className=\"board\">\n            <div className=\"board__message\">Minesweeper</div>\n            <button onClick={genTiles}>Start Game</button>\n            <div className=\"board__tiles\">\n                {tiles.map((row, rowIndex) => (\n                    <div>\n                        {row.map((tile, index) => (\n                            <Tile key={index} tile={tile} index={index} rowIndex={rowIndex} tileArr={tiles} ref={itemsRef.current[rowIndex + (index*10)]}/>\n                        ))}\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}