{"ast":null,"code":"import _slicedToArray from \"/Users/james/git/minesweeper/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/james/git/minesweeper/src/components/tile/tile.jsx\";\nimport React, { useState } from 'react';\nimport { updateShowingTiles } from '../../actions/tile-action';\nimport { connect } from 'react-redux';\nimport './tile.scss';\n\nfunction Tile(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        showExplosion = _useState2[0],\n        setExplosion = _useState2[1];\n\n  function selectTile(item) {\n    let replaceShowingTiles = [...props.showingTiles];\n    replaceShowingTiles.push(`${props.colIndex}${props.index}`);\n\n    if (item === -1) {\n      setExplosion(true);\n      props.tileArr.forEach((col, colI) => {\n        col.forEach((row, rowI) => {\n          replaceShowingTiles.push(`${colI}${rowI}`);\n        });\n      });\n    } else if (item === null) {\n      clearTiles(props.colIndex, props.index);\n    }\n\n    function clearTiles(col, row) {\n      if (replaceShowingTiles.filter(tile => tile === `${col}${row}`).length > 1) return;\n\n      for (let i = -1; i < 2; i++) {\n        for (let j = -1; j < 2; j++) {\n          if (props.tileArr[col + i] !== undefined && props.tileArr[col + i][row + j] !== undefined && props.tileArr[col + i][row + j] !== -1) {\n            replaceShowingTiles.push(`${col + i}${row + j}`);\n\n            if (props.tileArr[col + i][row + j] === null) {\n              clearTiles(col + i, row + j);\n            }\n          }\n        }\n      }\n    }\n\n    props.onupdateShowingTiles(replaceShowingTiles);\n  }\n\n  if (showExplosion) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"explosion-gif\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"iframe\", {\n      src: \"https://giphy.com/embed/rhYsUMhhd6yA0\",\n      width: \"480\",\n      height: \"270\",\n      frameBorder: \"0\",\n      class: \"giphy-embed\",\n      allowFullScreen: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"play-again\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Play Again\")));\n  } else {\n    return React.createElement(\"div\", {\n      className: props.showingTiles.filter(tile => tile === `${props.colIndex}${props.index}`).length > 0 ? `un-cover tile ${props.colIndex}${props.index}` : `cover tile ${props.colIndex}${props.index}`,\n      onClick: () => selectTile(props.tile),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, props.tile < 0 ? React.createElement(\"i\", {\n      class: \"fas fa-bomb\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, props.tile));\n  }\n}\n\nconst mapStateToProps = state => ({\n  showingTiles: state.showingTiles\n});\n\nconst mapActionsToProps = {\n  onupdateShowingTiles: updateShowingTiles\n};\nexport default connect(mapStateToProps, mapActionsToProps)(Tile);","map":{"version":3,"sources":["/Users/james/git/minesweeper/src/components/tile/tile.jsx"],"names":["React","useState","updateShowingTiles","connect","Tile","props","showExplosion","setExplosion","selectTile","item","replaceShowingTiles","showingTiles","push","colIndex","index","tileArr","forEach","col","colI","row","rowI","clearTiles","filter","tile","length","i","j","undefined","onupdateShowingTiles","mapStateToProps","state","mapActionsToProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { updateShowingTiles } from '../../actions/tile-action';\nimport { connect } from 'react-redux';\n\nimport './tile.scss';\n\nfunction Tile(props) {\n    const [showExplosion, setExplosion] = useState(false);\n\n    function selectTile(item) {\n        let replaceShowingTiles = [...props.showingTiles];\n        replaceShowingTiles.push(`${props.colIndex}${props.index}`);\n\n        if(item === -1) {\n            setExplosion(true);\n            props.tileArr.forEach((col, colI) => {\n                col.forEach((row, rowI) => {\n                    replaceShowingTiles.push(`${colI}${rowI}`);\n                })\n            })\n        }\n\n        else if (item === null) {\n            clearTiles(props.colIndex, props.index);\n        }\n        function clearTiles(col, row) {\n            if(replaceShowingTiles.filter(tile => tile === `${col}${row}`).length > 1) return\n            for(let i = -1; i < 2; i++) {\n                for(let j = -1; j < 2; j++) {\n                    if(props.tileArr[col+i] !== undefined && props.tileArr[col+i][row+j] !== undefined && props.tileArr[col+i][row+j] !== -1) {\n                        replaceShowingTiles.push(`${col+i}${row+j}`);\n                        if(props.tileArr[col+i][row+j] === null) {\n                            clearTiles(col+i, row+j);\n                        }\n                    }\n                }\n            }\n        }\n        props.onupdateShowingTiles(replaceShowingTiles);\n    }\n    if(showExplosion) {\n        return (\n            <div>\n                <div className=\"explosion-gif\">\n                    <iframe src=\"https://giphy.com/embed/rhYsUMhhd6yA0\" width=\"480\" height=\"270\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\n                </div>\n                <div className=\"play-again\"><button>Play Again</button></div>\n            </div>\n\n\n        )\n    }\n    else {\n        return (\n            <div className={ props.showingTiles.filter(tile => tile === `${props.colIndex}${props.index}`).length > 0 ? `un-cover tile ${props.colIndex}${props.index}` : `cover tile ${props.colIndex}${props.index}` } onClick={() => selectTile(props.tile)}>\n                {props.tile < 0 ? (\n                    <i class=\"fas fa-bomb\"></i>\n                ) : (\n                    <div>{props.tile}</div>\n                )}\n            </div>\n        )\n    }\n\n}\n\nconst mapStateToProps = state => ({\n    showingTiles: state.showingTiles,\n});\n\nconst mapActionsToProps = {\n    onupdateShowingTiles: updateShowingTiles,\n};\n\nexport default connect(mapStateToProps, mapActionsToProps) (Tile);"]},"metadata":{},"sourceType":"module"}