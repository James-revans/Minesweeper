{"ast":null,"code":"var _jsxFileName = \"/Users/james/git/minesweeper/src/components/tile/tile.jsx\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './tile.scss';\n\nfunction Tile(props) {\n  // const [cover, setCover] = useState('cover');\n  const itemsRef = useRef([]); // let currentTile = itemsRef.current;\n  // currentTile = `${props.rowIndex},${props.index}`;\n\n  function selectTile(item) {\n    if (item === -1) alert(\"You lose!\");else {\n      console.log(props.index + props.rowIndex * 10);\n      itemsRef.current[10].classList.add(\"un-cover\"); // setCover('un-cover');\n      // console.log(props.rowIndex);\n      // itemsRef.current.classList.add(\"un-cover\");\n\n      if (item === 0) {}\n\n      console.log(itemsRef);\n      revealBlanks();\n    }\n  }\n\n  const revealBlanks = useCallback(() => {\n    if (props.tile === null) {\n      // itemsRef.current[props.index + (props.rowIndex*10)].classList.add(\"un-cover\");\n      itemsRef.current[10].classList.add(\"un-cover\");\n    }\n  });\n  useEffect(() => {\n    itemsRef.current = itemsRef.current.slice(0, 100);\n  }, [props.tiles]); // useEffect(() => {\n  //     // itemsRef.current = currentTile;\n  //     // console.log(itemsRef.current);\n  // });\n\n  return React.createElement(\"div\", {\n    ref: el => itemsRef.current[props.index + props.rowIndex * 10] = el,\n    className: `tile cover ${props.rowIndex}${props.index}`,\n    onClick: () => selectTile(props.tile),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, props.tile);\n}\n\nexport default Tile;","map":{"version":3,"sources":["/Users/james/git/minesweeper/src/components/tile/tile.jsx"],"names":["React","useState","useEffect","useCallback","useRef","Tile","props","itemsRef","selectTile","item","alert","console","log","index","rowIndex","current","classList","add","revealBlanks","tile","slice","tiles","el"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,WAApC,EAAiDC,MAAjD,QAA8D,OAA9D;AACA,OAAO,aAAP;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACjB;AACA,QAAMC,QAAQ,GAAGH,MAAM,CAAC,EAAD,CAAvB,CAFiB,CAIjB;AACA;;AAEA,WAASI,UAAT,CAAoBC,IAApB,EAA0B;AACtB,QAAGA,IAAI,KAAK,CAAC,CAAb,EAAgBC,KAAK,CAAC,WAAD,CAAL,CAAhB,KACK;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,KAAN,GAAeP,KAAK,CAACQ,QAAN,GAAe,EAA1C;AACAP,MAAAA,QAAQ,CAACQ,OAAT,CAAiB,EAAjB,EAAqBC,SAArB,CAA+BC,GAA/B,CAAmC,UAAnC,EAFC,CAID;AACA;AACA;;AACA,UAAGR,IAAI,KAAK,CAAZ,EAAe,CAEd;;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACAW,MAAAA,YAAY;AACf;AACJ;;AAED,QAAMA,YAAY,GAAGf,WAAW,CAC5B,MAAM;AACF,QAAGG,KAAK,CAACa,IAAN,KAAe,IAAlB,EAAwB;AACpB;AACAZ,MAAAA,QAAQ,CAACQ,OAAT,CAAiB,EAAjB,EAAqBC,SAArB,CAA+BC,GAA/B,CAAmC,UAAnC;AACH;AACJ,GAN2B,CAAhC;AASAf,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,QAAQ,CAACQ,OAAT,GAAmBR,QAAQ,CAACQ,OAAT,CAAiBK,KAAjB,CAAuB,CAAvB,EAA0B,GAA1B,CAAnB;AACF,GAFO,EAEL,CAACd,KAAK,CAACe,KAAP,CAFK,CAAT,CAjCiB,CAqCjB;AAEA;AAEA;AACA;;AAEA,SACI;AAAK,IAAA,GAAG,EAAEC,EAAE,IAAIf,QAAQ,CAACQ,OAAT,CAAiBT,KAAK,CAACO,KAAN,GAAeP,KAAK,CAACQ,QAAN,GAAe,EAA/C,IAAsDQ,EAAtE;AAA0E,IAAA,SAAS,EAAG,cAAahB,KAAK,CAACQ,QAAS,GAAER,KAAK,CAACO,KAAM,EAAhI;AAAmI,IAAA,OAAO,EAAE,MAAML,UAAU,CAACF,KAAK,CAACa,IAAP,CAA5J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKb,KAAK,CAACa,IADX,CADJ;AAKH;;AACD,eAAed,IAAf","sourcesContent":["import React, {useState, useEffect, useCallback, useRef} from 'react';\nimport './tile.scss';\n\nfunction Tile(props) {\n    // const [cover, setCover] = useState('cover');\n    const itemsRef = useRef([]);\n\n    // let currentTile = itemsRef.current;\n    // currentTile = `${props.rowIndex},${props.index}`;\n\n    function selectTile(item) {\n        if(item === -1) alert(\"You lose!\");\n        else {\n            console.log(props.index + (props.rowIndex*10))\n            itemsRef.current[10].classList.add(\"un-cover\");\n\n            // setCover('un-cover');\n            // console.log(props.rowIndex);\n            // itemsRef.current.classList.add(\"un-cover\");\n            if(item === 0) {\n                \n            }\n            console.log(itemsRef);\n            revealBlanks();\n        }\n    }\n\n    const revealBlanks = useCallback(\n        () => {\n            if(props.tile === null) {\n                // itemsRef.current[props.index + (props.rowIndex*10)].classList.add(\"un-cover\");\n                itemsRef.current[10].classList.add(\"un-cover\");\n            }\n        }\n    )\n\n    useEffect(() => {\n        itemsRef.current = itemsRef.current.slice(0, 100);\n     }, [props.tiles]);\n\n    // useEffect(() => {\n\n    //     // itemsRef.current = currentTile;\n        \n    //     // console.log(itemsRef.current);\n    // });\n\n    return (\n        <div ref={el => itemsRef.current[props.index + (props.rowIndex*10)] = el} className={`tile cover ${props.rowIndex}${props.index}`} onClick={() => selectTile(props.tile)}>\n            {props.tile}\n        </div>\n    )\n}\nexport default Tile;"]},"metadata":{},"sourceType":"module"}