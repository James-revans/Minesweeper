{"ast":null,"code":"var _jsxFileName = \"/Users/james/git/minesweeper/src/components/tile/tile.jsx\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { updateShowingTiles } from '../../actions/tile-action';\nimport { connect } from 'react-redux';\nimport './tile.scss';\n\nfunction Tile(props) {\n  // const [cover, setCover] = useState('cover');\n  // const itemsRef = useRef([]);\n  // let currentTile = itemsRef.current;\n  // currentTile = `${props.rowIndex},${props.index}`;\n  function selectTile(item) {\n    let replaceShowingTiles = [...props.showingTiles];\n    replaceShowingTiles.push(`${props.rowIndex}${props.index}`);\n    props.onupdateShowingTiles(replaceShowingTiles);\n    if (item === -1) alert(\"You lose!\");else if (item === null) {\n      console.log(props.tileArr);\n      console.log(\"Clicked:\");\n      console.log(item);\n      console.log(`${props.rowIndex}${props.index}`);\n\n      if (props.tileArr[props.rowIndex - 1][props.index] === null) {\n        replaceShowingTiles.push(`${props.rowIndex}${props.index}`);\n      }\n\n      console.log(\"One above:\");\n      console.log(props.tileArr[props.rowIndex - 1][props.index]);\n      console.log(`${props.rowIndex - 1}${props.index}`); // itemsRef.current[props.rowIndex + (props.index*10)].classList.add(\"un-cover\");\n      // itemsRef.current[10].classList.add(\"un-cover\");\n      // setCover('un-cover');\n      // console.log(props.rowIndex);\n      // itemsRef.current.classList.add(\"un-cover\");\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: props.showingTiles.filter(tile => tile == `${props.rowIndex}${props.index}`).length > 0 ? `un-cover tile ${props.rowIndex}${props.index}` : `cover tile ${props.rowIndex}${props.index}`,\n    onClick: () => selectTile(props.tile),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, props.tile);\n}\n\nconst mapStateToProps = state => ({\n  showingTiles: state.showingTiles\n});\n\nconst mapActionsToProps = {\n  onupdateShowingTiles: updateShowingTiles\n};\nexport default connect(mapStateToProps, mapActionsToProps)(Tile);","map":{"version":3,"sources":["/Users/james/git/minesweeper/src/components/tile/tile.jsx"],"names":["React","useState","useEffect","useCallback","useRef","updateShowingTiles","connect","Tile","props","selectTile","item","replaceShowingTiles","showingTiles","push","rowIndex","index","onupdateShowingTiles","alert","console","log","tileArr","filter","tile","length","mapStateToProps","state","mapActionsToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,WAApC,EAAiDC,MAAjD,QAA8D,OAA9D;AACA,SAASC,kBAAT,QAAmC,2BAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,aAAP;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACjB;AACA;AACA;AACA;AAEA,WAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,QAAIC,mBAAmB,GAAG,CAAC,GAAGH,KAAK,CAACI,YAAV,CAA1B;AACAD,IAAAA,mBAAmB,CAACE,IAApB,CAA0B,GAAEL,KAAK,CAACM,QAAS,GAAEN,KAAK,CAACO,KAAM,EAAzD;AAEAP,IAAAA,KAAK,CAACQ,oBAAN,CAA2BL,mBAA3B;AACA,QAAGD,IAAI,KAAK,CAAC,CAAb,EAAgBO,KAAK,CAAC,WAAD,CAAL,CAAhB,KAEK,IAAIP,IAAI,KAAK,IAAb,EAAmB;AACpBQ,MAAAA,OAAO,CAACC,GAAR,CAAYX,KAAK,CAACY,OAAlB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAa,GAAEX,KAAK,CAACM,QAAS,GAAEN,KAAK,CAACO,KAAM,EAA5C;;AACA,UAAGP,KAAK,CAACY,OAAN,CAAcZ,KAAK,CAACM,QAAN,GAAe,CAA7B,EAAgCN,KAAK,CAACO,KAAtC,MAAiD,IAApD,EAA0D;AAACJ,QAAAA,mBAAmB,CAACE,IAApB,CAA0B,GAAEL,KAAK,CAACM,QAAS,GAAEN,KAAK,CAACO,KAAM,EAAzD;AAA6D;;AACxHG,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYX,KAAK,CAACY,OAAN,CAAcZ,KAAK,CAACM,QAAN,GAAe,CAA7B,EAAgCN,KAAK,CAACO,KAAtC,CAAZ;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAa,GAAEX,KAAK,CAACM,QAAN,GAAe,CAAE,GAAEN,KAAK,CAACO,KAAM,EAA9C,EARoB,CAUpB;AACA;AAEA;AACA;AACA;AAEH;AACJ;;AAED,SACI;AAAK,IAAA,SAAS,EAAGP,KAAK,CAACI,YAAN,CAAmBS,MAAnB,CAA0BC,IAAI,IAAIA,IAAI,IAAK,GAAEd,KAAK,CAACM,QAAS,GAAEN,KAAK,CAACO,KAAM,EAA1E,EAA6EQ,MAA7E,GAAsF,CAAtF,GAA2F,iBAAgBf,KAAK,CAACM,QAAS,GAAEN,KAAK,CAACO,KAAM,EAAxI,GAA6I,cAAaP,KAAK,CAACM,QAAS,GAAEN,KAAK,CAACO,KAAM,EAAxM;AAA4M,IAAA,OAAO,EAAE,MAAMN,UAAU,CAACD,KAAK,CAACc,IAAP,CAArO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKd,KAAK,CAACc,IADX,CADJ;AAKH;;AAED,MAAME,eAAe,GAAGC,KAAK,KAAK;AAC9Bb,EAAAA,YAAY,EAAEa,KAAK,CAACb;AADU,CAAL,CAA7B;;AAIA,MAAMc,iBAAiB,GAAG;AACtBV,EAAAA,oBAAoB,EAAEX;AADA,CAA1B;AAIA,eAAeC,OAAO,CAACkB,eAAD,EAAkBE,iBAAlB,CAAP,CAA6CnB,IAA7C,CAAf","sourcesContent":["import React, {useState, useEffect, useCallback, useRef} from 'react';\nimport { updateShowingTiles } from '../../actions/tile-action';\nimport { connect } from 'react-redux';\n\nimport './tile.scss';\n\nfunction Tile(props) {\n    // const [cover, setCover] = useState('cover');\n    // const itemsRef = useRef([]);\n    // let currentTile = itemsRef.current;\n    // currentTile = `${props.rowIndex},${props.index}`;\n\n    function selectTile(item) {\n        let replaceShowingTiles = [...props.showingTiles];\n        replaceShowingTiles.push(`${props.rowIndex}${props.index}`);\n\n        props.onupdateShowingTiles(replaceShowingTiles);\n        if(item === -1) alert(\"You lose!\");\n\n        else if (item === null) {\n            console.log(props.tileArr);\n            console.log(\"Clicked:\")\n            console.log(item);\n            console.log(`${props.rowIndex}${props.index}`);\n            if(props.tileArr[props.rowIndex-1][props.index] === null) {replaceShowingTiles.push(`${props.rowIndex}${props.index}`);}\n            console.log(\"One above:\");\n            console.log(props.tileArr[props.rowIndex-1][props.index]);\n            console.log(`${props.rowIndex-1}${props.index}`)\n\n            // itemsRef.current[props.rowIndex + (props.index*10)].classList.add(\"un-cover\");\n            // itemsRef.current[10].classList.add(\"un-cover\");\n\n            // setCover('un-cover');\n            // console.log(props.rowIndex);\n            // itemsRef.current.classList.add(\"un-cover\");\n\n        }\n    }\n\n    return (\n        <div className={ props.showingTiles.filter(tile => tile == `${props.rowIndex}${props.index}`).length > 0 ? `un-cover tile ${props.rowIndex}${props.index}` : `cover tile ${props.rowIndex}${props.index}` } onClick={() => selectTile(props.tile)}>\n            {props.tile}\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    showingTiles: state.showingTiles,\n});\n\nconst mapActionsToProps = {\n    onupdateShowingTiles: updateShowingTiles,\n};\n\nexport default connect(mapStateToProps, mapActionsToProps) (Tile);"]},"metadata":{},"sourceType":"module"}