{"ast":null,"code":"import _slicedToArray from \"/Users/james/git/minesweeper/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/james/git/minesweeper/src/components/tile/tile.jsx\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './tile.scss';\n\nfunction Tile(props) {\n  // const [cover, setCover] = useState('cover');\n  // const itemsRef = useRef([]);\n  // let currentTile = itemsRef.current;\n  // currentTile = `${props.rowIndex},${props.index}`;\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        showTiles = _useState2[0],\n        setShowTiles = _useState2[1];\n\n  function selectTile(item) {\n    console.log(showTil);\n    let replaceShowingTiles = [...showTiles];\n    replaceShowingTiles.push(props.rowIndex + props.index);\n    setShowTiles(replaceShowingTiles);\n    if (item === -1) alert(\"You lose!\");else {\n      // itemsRef.current[props.rowIndex + (props.index*10)].classList.add(\"un-cover\");\n      // itemsRef.current[10].classList.add(\"un-cover\");\n      // setCover('un-cover');\n      // console.log(props.rowIndex);\n      // itemsRef.current.classList.add(\"un-cover\");\n      revealBlanks();\n    }\n  }\n\n  const revealBlanks = useCallback(() => {\n    if (props.tile === null) {// itemsRef[props.rowIndex + (props.index*10)].classList.add(\"un-cover\");\n      // itemsRef.current[10].classList.add(\"un-cover\");\n    }\n  }); // useEffect(() => {\n  //     itemsRef.current = itemsRef.current.slice(0, 100);\n  //  }, [props.tiles]);\n  // useEffect(() => {\n  //     // itemsRef.current = currentTile;\n  //     // console.log(itemsRef.current);\n  // });\n\n  return React.createElement(\"div\", {\n    className: showTiles.filter(tile => tile == props.rowIndex + props.index) ? `un-cover tile ${props.rowIndex}${props.index}` : `cover tile ${props.rowIndex}${props.index}`,\n    onClick: () => selectTile(props.tile),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, props.tile);\n}\n\nexport default Tile;","map":{"version":3,"sources":["/Users/james/git/minesweeper/src/components/tile/tile.jsx"],"names":["React","useState","useEffect","useCallback","useRef","Tile","props","showTiles","setShowTiles","selectTile","item","console","log","showTil","replaceShowingTiles","push","rowIndex","index","alert","revealBlanks","tile","filter"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,WAApC,EAAiDC,MAAjD,QAA8D,OAA9D;AACA,OAAO,aAAP;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACjB;AACA;AACA;AACA;AAJiB,oBAKiBL,QAAQ,CAAC,EAAD,CALzB;AAAA;AAAA,QAKVM,SALU;AAAA,QAKCC,YALD;;AAOjB,WAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACA,QAAIC,mBAAmB,GAAG,CAAC,GAAGP,SAAJ,CAA1B;AACAO,IAAAA,mBAAmB,CAACC,IAApB,CAAyBT,KAAK,CAACU,QAAN,GAAiBV,KAAK,CAACW,KAAhD;AACAT,IAAAA,YAAY,CAACM,mBAAD,CAAZ;AAEA,QAAGJ,IAAI,KAAK,CAAC,CAAb,EAAgBQ,KAAK,CAAC,WAAD,CAAL,CAAhB,KAEK;AACD;AACA;AAEA;AACA;AACA;AAEAC,MAAAA,YAAY;AACf;AACJ;;AAED,QAAMA,YAAY,GAAGhB,WAAW,CAC5B,MAAM;AACF,QAAGG,KAAK,CAACc,IAAN,KAAe,IAAlB,EAAwB,CACpB;AACA;AACH;AACJ,GAN2B,CAAhC,CA3BiB,CAoCjB;AACA;AACA;AAEA;AAEA;AAEA;AACA;;AACA,SACI;AAAK,IAAA,SAAS,EAAGb,SAAS,CAACc,MAAV,CAAiBD,IAAI,IAAIA,IAAI,IAAId,KAAK,CAACU,QAAN,GAAiBV,KAAK,CAACW,KAAxD,IAAkE,iBAAgBX,KAAK,CAACU,QAAS,GAAEV,KAAK,CAACW,KAAM,EAA/G,GAAoH,cAAaX,KAAK,CAACU,QAAS,GAAEV,KAAK,CAACW,KAAM,EAA/K;AAAmL,IAAA,OAAO,EAAE,MAAMR,UAAU,CAACH,KAAK,CAACc,IAAP,CAA5M;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKd,KAAK,CAACc,IADX,CADJ;AAKH;;AACD,eAAef,IAAf","sourcesContent":["import React, {useState, useEffect, useCallback, useRef} from 'react';\nimport './tile.scss';\n\nfunction Tile(props) {\n    // const [cover, setCover] = useState('cover');\n    // const itemsRef = useRef([]);\n    // let currentTile = itemsRef.current;\n    // currentTile = `${props.rowIndex},${props.index}`;\n    const [showTiles, setShowTiles] = useState([]);\n\n    function selectTile(item) {\n        console.log(showTil)\n        let replaceShowingTiles = [...showTiles];\n        replaceShowingTiles.push(props.rowIndex + props.index);\n        setShowTiles(replaceShowingTiles);\n\n        if(item === -1) alert(\"You lose!\");\n\n        else {\n            // itemsRef.current[props.rowIndex + (props.index*10)].classList.add(\"un-cover\");\n            // itemsRef.current[10].classList.add(\"un-cover\");\n\n            // setCover('un-cover');\n            // console.log(props.rowIndex);\n            // itemsRef.current.classList.add(\"un-cover\");\n\n            revealBlanks();\n        }\n    }\n\n    const revealBlanks = useCallback(\n        () => {\n            if(props.tile === null) {\n                // itemsRef[props.rowIndex + (props.index*10)].classList.add(\"un-cover\");\n                // itemsRef.current[10].classList.add(\"un-cover\");\n            }\n        }\n    )\n\n    // useEffect(() => {\n    //     itemsRef.current = itemsRef.current.slice(0, 100);\n    //  }, [props.tiles]);\n\n    // useEffect(() => {\n\n    //     // itemsRef.current = currentTile;\n        \n    //     // console.log(itemsRef.current);\n    // });\n    return (\n        <div className={ showTiles.filter(tile => tile == props.rowIndex + props.index) ? `un-cover tile ${props.rowIndex}${props.index}` : `cover tile ${props.rowIndex}${props.index}` } onClick={() => selectTile(props.tile)}>\n            {props.tile}\n        </div>\n    )\n}\nexport default Tile;"]},"metadata":{},"sourceType":"module"}