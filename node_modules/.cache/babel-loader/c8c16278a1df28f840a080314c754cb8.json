{"ast":null,"code":"var _jsxFileName = \"/Users/james/git/minesweeper/src/components/tile/tile.jsx\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { updateShowingTiles } from '../../actions/tile-action';\nimport { connect } from 'react-redux';\nimport './tile.scss';\n\nfunction Tile(props) {\n  // const [cover, setCover] = useState('cover');\n  // const itemsRef = useRef([]);\n  // let currentTile = itemsRef.current;\n  // currentTile = `${props.rowIndex},${props.index}`;\n  function selectTile(item) {\n    console.log(props.tileArr);\n    let replaceShowingTiles = [...props.showingTiles];\n    replaceShowingTiles.push(`${props.rowIndex}${props.index}`);\n    props.onupdateShowingTiles(replaceShowingTiles);\n    console.log(props.showingTiles);\n    if (item === -1) alert(\"You lose!\");else if (item === 0) {// itemsRef.current[props.rowIndex + (props.index*10)].classList.add(\"un-cover\");\n      // itemsRef.current[10].classList.add(\"un-cover\");\n      // setCover('un-cover');\n      // console.log(props.rowIndex);\n      // itemsRef.current.classList.add(\"un-cover\");\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: props.showingTiles.filter(tile => tile == `${props.rowIndex}${props.index}`).length > 0 ? `un-cover tile ${props.rowIndex}${props.index}` : `cover tile ${props.rowIndex}${props.index}`,\n    onClick: () => selectTile(props.tile),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, props.tile);\n}\n\nconst mapStateToProps = state => ({\n  showingTiles: state.showingTiles\n});\n\nconst mapActionsToProps = {\n  onupdateShowingTiles: updateShowingTiles\n};\nexport default connect(mapStateToProps, mapActionsToProps)(Tile);","map":{"version":3,"sources":["/Users/james/git/minesweeper/src/components/tile/tile.jsx"],"names":["React","useState","useEffect","useCallback","useRef","updateShowingTiles","connect","Tile","props","selectTile","item","console","log","tileArr","replaceShowingTiles","showingTiles","push","rowIndex","index","onupdateShowingTiles","alert","filter","tile","length","mapStateToProps","state","mapActionsToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,WAApC,EAAiDC,MAAjD,QAA8D,OAA9D;AACA,SAASC,kBAAT,QAAmC,2BAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,aAAP;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACjB;AACA;AACA;AACA;AAEA,WAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,OAAlB;AACA,QAAIC,mBAAmB,GAAG,CAAC,GAAGN,KAAK,CAACO,YAAV,CAA1B;AACAD,IAAAA,mBAAmB,CAACE,IAApB,CAA0B,GAAER,KAAK,CAACS,QAAS,GAAET,KAAK,CAACU,KAAM,EAAzD;AAEAV,IAAAA,KAAK,CAACW,oBAAN,CAA2BL,mBAA3B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACO,YAAlB;AACA,QAAGL,IAAI,KAAK,CAAC,CAAb,EAAgBU,KAAK,CAAC,WAAD,CAAL,CAAhB,KAEK,IAAIV,IAAI,KAAK,CAAb,EAAgB,CACjB;AACA;AAEA;AACA;AACA;AAEH;AACJ;;AAED,SACI;AAAK,IAAA,SAAS,EAAGF,KAAK,CAACO,YAAN,CAAmBM,MAAnB,CAA0BC,IAAI,IAAIA,IAAI,IAAK,GAAEd,KAAK,CAACS,QAAS,GAAET,KAAK,CAACU,KAAM,EAA1E,EAA6EK,MAA7E,GAAsF,CAAtF,GAA2F,iBAAgBf,KAAK,CAACS,QAAS,GAAET,KAAK,CAACU,KAAM,EAAxI,GAA6I,cAAaV,KAAK,CAACS,QAAS,GAAET,KAAK,CAACU,KAAM,EAAxM;AAA4M,IAAA,OAAO,EAAE,MAAMT,UAAU,CAACD,KAAK,CAACc,IAAP,CAArO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKd,KAAK,CAACc,IADX,CADJ;AAKH;;AAED,MAAME,eAAe,GAAGC,KAAK,KAAK;AAC9BV,EAAAA,YAAY,EAAEU,KAAK,CAACV;AADU,CAAL,CAA7B;;AAIA,MAAMW,iBAAiB,GAAG;AACtBP,EAAAA,oBAAoB,EAAEd;AADA,CAA1B;AAIA,eAAeC,OAAO,CAACkB,eAAD,EAAkBE,iBAAlB,CAAP,CAA6CnB,IAA7C,CAAf","sourcesContent":["import React, {useState, useEffect, useCallback, useRef} from 'react';\nimport { updateShowingTiles } from '../../actions/tile-action';\nimport { connect } from 'react-redux';\n\nimport './tile.scss';\n\nfunction Tile(props) {\n    // const [cover, setCover] = useState('cover');\n    // const itemsRef = useRef([]);\n    // let currentTile = itemsRef.current;\n    // currentTile = `${props.rowIndex},${props.index}`;\n\n    function selectTile(item) {\n        console.log(props.tileArr);\n        let replaceShowingTiles = [...props.showingTiles];\n        replaceShowingTiles.push(`${props.rowIndex}${props.index}`);\n\n        props.onupdateShowingTiles(replaceShowingTiles);\n        console.log(props.showingTiles);\n        if(item === -1) alert(\"You lose!\");\n\n        else if (item === 0) {\n            // itemsRef.current[props.rowIndex + (props.index*10)].classList.add(\"un-cover\");\n            // itemsRef.current[10].classList.add(\"un-cover\");\n\n            // setCover('un-cover');\n            // console.log(props.rowIndex);\n            // itemsRef.current.classList.add(\"un-cover\");\n\n        }\n    }\n\n    return (\n        <div className={ props.showingTiles.filter(tile => tile == `${props.rowIndex}${props.index}`).length > 0 ? `un-cover tile ${props.rowIndex}${props.index}` : `cover tile ${props.rowIndex}${props.index}` } onClick={() => selectTile(props.tile)}>\n            {props.tile}\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    showingTiles: state.showingTiles,\n});\n\nconst mapActionsToProps = {\n    onupdateShowingTiles: updateShowingTiles,\n};\n\nexport default connect(mapStateToProps, mapActionsToProps) (Tile);"]},"metadata":{},"sourceType":"module"}