{"ast":null,"code":"import _slicedToArray from \"/Users/james/git/minesweeper/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/james/git/minesweeper/src/components/board/board.jsx\";\nimport React, { useState } from 'react';\nimport './board.scss';\nimport Tile from '../tile/tile';\n\nfunction Board(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        tiles = _useState2[0],\n        setTiles = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        showExplosion = _useState4[0],\n        setExplosion = _useState4[1];\n\n  function genTiles() {\n    setExplosion(false);\n    let replaceTiles = Array.from(Array(10), _ => Array(10).fill(null));\n    replaceTiles.forEach((arr, arrIndex) => {\n      arr.forEach((item, index) => {\n        let num = Math.floor(Math.random() * (5 + 1)) - 1;\n\n        if (num === -1) {\n          replaceTiles[arrIndex][index] = num;\n        }\n      });\n    });\n    replaceTiles.forEach((arr, arrIndex) => {\n      arr.forEach((item, index) => {\n        if (item === -1) {\n          for (let i = -1; i < 2; i++) {\n            for (let j = -1; j < 2; j++) {\n              if (replaceTiles[arrIndex + i] !== undefined && replaceTiles[arrIndex + i][index + j] !== undefined && replaceTiles[arrIndex + i][index + j] !== -1) {\n                replaceTiles[arrIndex + i][index + j] += 1;\n              }\n            }\n          }\n        }\n      });\n    });\n    setTiles(replaceTiles);\n  }\n\n  function bombClick() {\n    setExplosion(true);\n  }\n\n  if (showExplosion) {\n    return React.createElement(\"div\", {\n      className: \"game-over\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"explosion-gif\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"iframe\", {\n      src: \"https://giphy.com/embed/rhYsUMhhd6yA0\",\n      width: \"480\",\n      height: \"270\",\n      frameBorder: \"0\",\n      class: \"giphy-embed\",\n      allowFullScreen: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"play-again\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: genTiles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Play Again\")));\n  } else {\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"board__message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Minesweeper\"), React.createElement(\"button\", {\n      onClick: genTiles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Create New Game\"), React.createElement(\"div\", {\n      className: \"board__tiles\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, tiles.map((col, colIndex) => React.createElement(\"div\", {\n      key: colIndex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, col.map((tile, index) => React.createElement(Tile, {\n      key: index,\n      tile: tile,\n      index: index,\n      colIndex: colIndex,\n      tileArr: tiles,\n      bombClick: bombClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }))))));\n  }\n}\n\nconst mapStateToProps = state => ({\n  showingTiles: state.showingTiles\n});\n\nconst mapActionsToProps = {\n  onupdateShowingTiles: updateShowingTiles\n};\nexport default connect(mapStateToProps, mapActionsToProps)(Board);","map":{"version":3,"sources":["/Users/james/git/minesweeper/src/components/board/board.jsx"],"names":["React","useState","Tile","Board","props","tiles","setTiles","showExplosion","setExplosion","genTiles","replaceTiles","Array","from","_","fill","forEach","arr","arrIndex","item","index","num","Math","floor","random","i","j","undefined","bombClick","map","col","colIndex","tile","mapStateToProps","state","showingTiles","mapActionsToProps","onupdateShowingTiles","updateShowingTiles","connect"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './board.scss';\n\n\nimport Tile from '../tile/tile';\n\nfunction Board(props) {\n    const [tiles, setTiles] = useState([]);\n    const [showExplosion, setExplosion] = useState(false);\n\n    function genTiles() {\n        setExplosion(false);\n        let replaceTiles = Array.from(Array(10), _ => Array(10).fill(null));\n        replaceTiles.forEach((arr, arrIndex) => {\n            arr.forEach((item, index) => {\n                let num = Math.floor(Math.random() * (5 + 1)) -1;\n                if(num === -1) {\n                    replaceTiles[arrIndex][index] = num;\n                }\n            })\n        })\n\n        replaceTiles.forEach((arr, arrIndex) => {\n            arr.forEach((item, index) => {\n                if (item === -1) {\n                    for(let i = -1; i < 2; i++) {\n                        for(let j = -1; j < 2; j++) {\n                            if(replaceTiles[arrIndex+i] !== undefined && replaceTiles[arrIndex+i][index+j] !== undefined && replaceTiles[arrIndex+i][index+j] !== -1) {\n                                replaceTiles[arrIndex+i][index+j]+=1;\n                            }\n                        }\n                    }\n                }\n            })\n        })\n        setTiles(replaceTiles);\n    }\n\n    function bombClick() {\n        setExplosion(true);\n\n    }\n\n    if(showExplosion) {\n        return (\n            <div className=\"game-over\">\n                <div className=\"explosion-gif\">\n                    <iframe src=\"https://giphy.com/embed/rhYsUMhhd6yA0\" width=\"480\" height=\"270\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\n                </div>\n                <div className=\"play-again\"><button onClick={genTiles}>Play Again</button></div>\n            </div>\n        )\n    }\n    else {\n        return (\n            <div className=\"board\">\n                <div className=\"board__message\">Minesweeper</div>\n                <button onClick={genTiles}>Create New Game</button>\n                <div className=\"board__tiles\">\n                    {tiles.map((col, colIndex) => (\n                        <div key={colIndex}>\n                            {col.map((tile, index) => (\n                                <Tile key={index} tile={tile} index={index} colIndex={colIndex} tileArr={tiles} bombClick={bombClick}/>\n                            ))}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        )\n    }\n\n}\n\nconst mapStateToProps = state => ({\n    showingTiles: state.showingTiles,\n});\n\nconst mapActionsToProps = {\n    onupdateShowingTiles: updateShowingTiles,\n};\n\nexport default connect(mapStateToProps, mapActionsToProps) (Board);"]},"metadata":{},"sourceType":"module"}